<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>孙嘉玉的技术博客</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-05-07T02:19:33.242Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Sun Jiayu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++17新特性之内联变量</title>
    <link href="http://example.com/2024/05/07/C++17%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8B%E5%86%85%E8%81%94%E5%8F%98%E9%87%8F/"/>
    <id>http://example.com/2024/05/07/C++17%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8B%E5%86%85%E8%81%94%E5%8F%98%E9%87%8F/</id>
    <published>2024-05-07T01:53:11.053Z</published>
    <updated>2024-05-07T02:19:33.242Z</updated>
    
    <content type="html"><![CDATA[<h2 id="非const的静态成员变量"><a class="markdownIt-Anchor" href="#非const的静态成员变量"></a> 非const的静态成员变量</h2><h3 id="c17以前"><a class="markdownIt-Anchor" href="#c17以前"></a> C++17以前</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 某个头文件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="type">static</span> std::string name;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 某个源文件</span></span><br><span class="line">MyClass::name = <span class="string">&quot;abc&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="c17起"><a class="markdownIt-Anchor" href="#c17起"></a> C++17起</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 某个头文件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="type">static</span> <span class="keyword">inline</span> std::string name = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>该静态成员变量的初始化，在第一次被源文件发现时执行。</p><h2 id="constexpr"><a class="markdownIt-Anchor" href="#constexpr"></a> constexpr</h2><p>自从C++17起，对于静态成员变量，constexpr暗示inline。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">D</span> &#123;</span><br><span class="line">    <span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">int</span> n = <span class="number">5</span>; <span class="comment">// C++11/C++14: declaration</span></span><br><span class="line">                                <span class="comment">// C++17: definition</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="thread_local"><a class="markdownIt-Anchor" href="#thread_local"></a> thread_local</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">MyData</span> &#123;</span><br><span class="line">    <span class="keyword">inline</span> <span class="type">static</span> std::string gName = <span class="string">&quot;global&quot;</span>; <span class="comment">// 全局唯一</span></span><br><span class="line">    <span class="keyword">inline</span> <span class="type">static</span> <span class="keyword">thread_local</span> std::string tName = <span class="string">&quot;tls&quot;</span>; <span class="comment">// 每个线程内唯一</span></span><br><span class="line">    std::string lName = <span class="string">&quot;local&quot;</span>; <span class="comment">// 每个对象唯一</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;非const的静态成员变量&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#非const的静态成员变量&quot;&gt;&lt;/a&gt; 非const的静态成员变量&lt;/h2&gt;
&lt;h3 id=&quot;c17以前&quot;&gt;&lt;a class=&quot;markdownIt-Anchor</summary>
      
    
    
    
    <category term="编程语言" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="c++17" scheme="http://example.com/tags/c-17/"/>
    
  </entry>
  
  <entry>
    <title>C++17新特性之结构化绑定</title>
    <link href="http://example.com/2024/05/06/C++17%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8B%E7%BB%93%E6%9E%84%E5%8C%96%E7%BB%91%E5%AE%9A/"/>
    <id>http://example.com/2024/05/06/C++17%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8B%E7%BB%93%E6%9E%84%E5%8C%96%E7%BB%91%E5%AE%9A/</id>
    <published>2024-05-06T06:03:52.657Z</published>
    <updated>2024-05-07T01:52:55.757Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本语法"><a class="markdownIt-Anchor" href="#基本语法"></a> 基本语法</h2><p>可以直接绑定结构体变量：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">S</span> &#123;</span><br><span class="line">    <span class="type">int32_t</span> a;</span><br><span class="line">    std::string b;</span><br><span class="line">&#125;;</span><br><span class="line">S s;</span><br><span class="line"><span class="keyword">auto</span> [a, b] = s;</span><br></pre></td></tr></table></figure><p>可以绑定数组：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int32_t</span>[] arr &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;;</span><br><span class="line"><span class="keyword">auto</span> [a, b, c] = arr;</span><br></pre></td></tr></table></figure><p>可以绑定pair/tuple：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">std::pair&lt;<span class="type">int32_t</span>, <span class="type">double</span>&gt; p = std::<span class="built_in">make_pair</span>(<span class="number">2</span>, <span class="number">3.0</span>);</span><br><span class="line"><span class="keyword">auto</span> [i32, f64] = p;</span><br></pre></td></tr></table></figure><p>这使得一些kv容器的遍历更加简洁，省去了取first和second的操作。</p><h2 id="给自定义类实现结构化绑定语法"><a class="markdownIt-Anchor" href="#给自定义类实现结构化绑定语法"></a> 给自定义类实现结构化绑定语法</h2><p>需要实现一个类似tuple-like API：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// xxx.h</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">S</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int32_t</span> a;</span><br><span class="line">    <span class="type">int64_t</span> b;</span><br><span class="line">    <span class="type">double</span> c;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">S</span>() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="comment">// some other ctor</span></span><br><span class="line">    <span class="function"><span class="type">int32_t</span> <span class="title">get_a</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> a; &#125;</span><br><span class="line">    <span class="function"><span class="type">int32_t</span> <span class="title">get_b</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> b; &#125;</span><br><span class="line">    <span class="function"><span class="type">int32_t</span> <span class="title">get_c</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> c; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// xxx.hpp</span></span><br><span class="line"><span class="keyword">template</span> &lt;std::<span class="type">size_t</span> I&gt; <span class="function"><span class="keyword">auto</span> <span class="title">get</span><span class="params">(<span class="type">const</span> S&amp; s)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">static_assert</span>(I &lt; <span class="number">3</span>);</span><br><span class="line">    <span class="function"><span class="keyword">if</span> <span class="title">constexpr</span> <span class="params">(I == <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s.<span class="built_in">get_a</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> <span class="built_in">constexpr</span> (I == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> s.<span class="built_in">get_b</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> s.<span class="built_in">get_c</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就可以写如下代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">S s;</span><br><span class="line"><span class="keyword">auto</span> [a, b, c] = s;</span><br></pre></td></tr></table></figure><h2 id="使用注意"><a class="markdownIt-Anchor" href="#使用注意"></a> 使用注意</h2><p>如果意图只取其中部分元素，可以用下划线标记无用变量。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">std::pair&lt;<span class="type">int32_t</span>, <span class="type">double</span>&gt; p = std::<span class="built_in">make_pair</span>(<span class="number">2</span>, <span class="number">3.0</span>);</span><br><span class="line"><span class="keyword">auto</span> [_, f64] = p;</span><br></pre></td></tr></table></figure><p>这实现了类似rust的语法，但是和rust有本质区别。c++编译器认为这里的下划线是一个独立的变量，因此下列代码无法编译：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">std::pair&lt;<span class="type">int32_t</span>, <span class="type">double</span>&gt; p = std::<span class="built_in">make_pair</span>(<span class="number">2</span>, <span class="number">3.0</span>);</span><br><span class="line"><span class="keyword">auto</span> [_, f64] = p;</span><br><span class="line"><span class="keyword">auto</span> [_, f64] = p; <span class="comment">// _ already defined</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;基本语法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#基本语法&quot;&gt;&lt;/a&gt; 基本语法&lt;/h2&gt;
&lt;p&gt;可以直接绑定结构体变量：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas</summary>
      
    
    
    
    <category term="编程语言" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="c++17" scheme="http://example.com/tags/c-17/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2024/05/06/hello-world/"/>
    <id>http://example.com/2024/05/06/hello-world/</id>
    <published>2024-05-06T01:02:45.321Z</published>
    <updated>2024-05-06T11:23:24.936Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>y</mi><mi>i</mi></msub><mo>=</mo><mi>ω</mi><mo>∗</mo><msub><mi>x</mi><mi>i</mi></msub><mo>+</mo><msub><mi>b</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">y_i = \omega * x_i + b_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo>∑</mo></mrow><annotation encoding="application/x-tex">\sum</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.6000100000000002em;vertical-align:-0.55001em;"></span><span class="mop op-symbol large-op" style="position:relative;top:-0.000004999999999977245em;">∑</span></span></span></span></span></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    <category term="test" scheme="http://example.com/categories/test/"/>
    
    
    <category term="test" scheme="http://example.com/tags/test/"/>
    
  </entry>
  
</feed>
