{"meta":{"title":"孙嘉玉的技术博客","subtitle":"","description":"","author":"Sun Jiayu","url":"http://example.com","root":"/"},"pages":[{"title":"Repositories","date":"2024-05-06T11:23:24.937Z","updated":"2024-05-06T11:23:24.937Z","comments":false,"path":"repository/index.html","permalink":"http://example.com/repository/index.html","excerpt":"","text":""},{"title":"分类","date":"2024-05-06T11:23:24.937Z","updated":"2024-05-06T11:23:24.937Z","comments":false,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2024-05-06T11:23:24.937Z","updated":"2024-05-06T11:23:24.937Z","comments":false,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"C++17新特性之内联变量","slug":"C++17新特性之内联变量","date":"2024-05-07T01:53:11.053Z","updated":"2024-05-07T02:19:33.242Z","comments":false,"path":"2024/05/07/C++17新特性之内联变量/","permalink":"http://example.com/2024/05/07/C++17%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8B%E5%86%85%E8%81%94%E5%8F%98%E9%87%8F/","excerpt":"","text":"非const的静态成员变量 C++17以前 123456// 某个头文件class MyClass &#123; static std::string name;&#125;;// 某个源文件MyClass::name = &quot;abc&quot;; C++17起 1234// 某个头文件class MyClass &#123; static inline std::string name = &quot;abc&quot;;&#125;; 该静态成员变量的初始化，在第一次被源文件发现时执行。 constexpr 自从C++17起，对于静态成员变量，constexpr暗示inline。 1234struct D &#123; static constexpr int n = 5; // C++11/C++14: declaration // C++17: definition&#125;; thread_local 123456struct MyData &#123; inline static std::string gName = &quot;global&quot;; // 全局唯一 inline static thread_local std::string tName = &quot;tls&quot;; // 每个线程内唯一 std::string lName = &quot;local&quot;; // 每个对象唯一&#125;;","categories":[{"name":"编程语言","slug":"编程语言","permalink":"http://example.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"c++17","slug":"c-17","permalink":"http://example.com/tags/c-17/"}]},{"title":"C++17新特性之结构化绑定","slug":"C++17新特性之结构化绑定","date":"2024-05-06T06:03:52.657Z","updated":"2024-05-07T01:52:55.757Z","comments":false,"path":"2024/05/06/C++17新特性之结构化绑定/","permalink":"http://example.com/2024/05/06/C++17%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8B%E7%BB%93%E6%9E%84%E5%8C%96%E7%BB%91%E5%AE%9A/","excerpt":"","text":"基本语法 可以直接绑定结构体变量： 123456struct S &#123; int32_t a; std::string b;&#125;;S s;auto [a, b] = s; 可以绑定数组： 12int32_t[] arr &#123; 1, 2, 3 &#125;;auto [a, b, c] = arr; 可以绑定pair/tuple： 12std::pair&lt;int32_t, double&gt; p = std::make_pair(2, 3.0);auto [i32, f64] = p; 这使得一些kv容器的遍历更加简洁，省去了取first和second的操作。 给自定义类实现结构化绑定语法 需要实现一个类似tuple-like API： 1234567891011121314151617181920212223242526// xxx.hclass S &#123;private: int32_t a; int64_t b; double c;public: S() = default; // some other ctor int32_t get_a() &#123; return a; &#125; int32_t get_b() &#123; return b; &#125; int32_t get_c() &#123; return c; &#125;&#125;;// xxx.hpptemplate &lt;std::size_t I&gt; auto get(const S&amp; s) &#123; static_assert(I &lt; 3); if constexpr (I == 0) &#123; return s.get_a(); &#125; else if constexpr (I == 1) &#123; return s.get_b(); &#125; else &#123; return s.get_c(); &#125;&#125; 然后就可以写如下代码： 12S s;auto [a, b, c] = s; 使用注意 如果意图只取其中部分元素，可以用下划线标记无用变量。 12std::pair&lt;int32_t, double&gt; p = std::make_pair(2, 3.0);auto [_, f64] = p; 这实现了类似rust的语法，但是和rust有本质区别。c++编译器认为这里的下划线是一个独立的变量，因此下列代码无法编译： 123std::pair&lt;int32_t, double&gt; p = std::make_pair(2, 3.0);auto [_, f64] = p;auto [_, f64] = p; // _ already defined","categories":[{"name":"编程语言","slug":"编程语言","permalink":"http://example.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"c++17","slug":"c-17","permalink":"http://example.com/tags/c-17/"}]},{"title":"Hello World","slug":"hello-world","date":"2024-05-06T01:02:45.321Z","updated":"2024-05-06T11:23:24.936Z","comments":false,"path":"2024/05/06/hello-world/","permalink":"http://example.com/2024/05/06/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post yi=ω∗xi+biy_i = \\omega * x_i + b_i yi​=ω∗xi​+bi​ ∑\\sum ∑ 1$ hexo new &quot;My New Post&quot; More info: Writing Run server 1$ hexo server More info: Server Generate static files 1$ hexo generate More info: Generating Deploy to remote sites 1$ hexo deploy More info: Deployment","categories":[{"name":"test","slug":"test","permalink":"http://example.com/categories/test/"}],"tags":[{"name":"test","slug":"test","permalink":"http://example.com/tags/test/"}]}],"categories":[{"name":"编程语言","slug":"编程语言","permalink":"http://example.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"},{"name":"test","slug":"test","permalink":"http://example.com/categories/test/"}],"tags":[{"name":"c++17","slug":"c-17","permalink":"http://example.com/tags/c-17/"},{"name":"test","slug":"test","permalink":"http://example.com/tags/test/"}]}